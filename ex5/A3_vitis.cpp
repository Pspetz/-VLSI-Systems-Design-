-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrix_mult is
port (
    ap_local_block : OUT STD_LOGIC;
    ap_local_deadlock : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_0_0 : IN STD_LOGIC_VECTOR (4 downto 0);
    A_0_1 : IN STD_LOGIC_VECTOR (4 downto 0);
    A_0_2 : IN STD_LOGIC_VECTOR (4 downto 0);
    A_1_0 : IN STD_LOGIC_VECTOR (4 downto 0);
    A_1_1 : IN STD_LOGIC_VECTOR (4 downto 0);
    A_1_2 : IN STD_LOGIC_VECTOR (4 downto 0);
    A_2_0 : IN STD_LOGIC_VECTOR (4 downto 0);
    A_2_1 : IN STD_LOGIC_VECTOR (4 downto 0);
    A_2_2 : IN STD_LOGIC_VECTOR (4 downto 0);
    B_0_0 : IN STD_LOGIC_VECTOR (4 downto 0);
    B_0_1 : IN STD_LOGIC_VECTOR (4 downto 0);
    B_0_2 : IN STD_LOGIC_VECTOR (4 downto 0);
    B_1_0 : IN STD_LOGIC_VECTOR (4 downto 0);
    B_1_1 : IN STD_LOGIC_VECTOR (4 downto 0);
    B_1_2 : IN STD_LOGIC_VECTOR (4 downto 0);
    B_2_0 : IN STD_LOGIC_VECTOR (4 downto 0);
    B_2_1 : IN STD_LOGIC_VECTOR (4 downto 0);
    B_2_2 : IN STD_LOGIC_VECTOR (4 downto 0);
    C_0_0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    C_0_0_ap_vld : OUT STD_LOGIC;
    C_0_1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    C_0_1_ap_vld : OUT STD_LOGIC;
    C_0_2 : OUT STD_LOGIC_VECTOR (9 downto 0);
    C_0_2_ap_vld : OUT STD_LOGIC;
    C_1_0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    C_1_0_ap_vld : OUT STD_LOGIC;
    C_1_1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    C_1_1_ap_vld : OUT STD_LOGIC;
    C_1_2 : OUT STD_LOGIC_VECTOR (9 downto 0);
    C_1_2_ap_vld : OUT STD_LOGIC;
    C_2_0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    C_2_0_ap_vld : OUT STD_LOGIC;
    C_2_1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    C_2_1_ap_vld : OUT STD_LOGIC;
    C_2_2 : OUT STD_LOGIC_VECTOR (9 downto 0);
    C_2_2_ap_vld : OUT STD_LOGIC );
end;


architecture behav of matrix_mult is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrix_mult_matrix_mult,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvf1517-3-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.456286,HLS_SYN_LAT=5,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=4,HLS_SYN_LUT=179,HLS_VERSION=2021_2}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln15_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal i_fu_92 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln15_fu_281_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_load_fu_272_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ret_fu_319_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_1_fu_384_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_2_fu_401_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal lhs_fu_287_p5 : STD_LOGIC_VECTOR (4 downto 0);
    signal rhs_fu_303_p5 : STD_LOGIC_VECTOR (4 downto 0);
    signal lhs_1_fu_328_p5 : STD_LOGIC_VECTOR (4 downto 0);
    signal rhs_1_fu_340_p5 : STD_LOGIC_VECTOR (4 downto 0);
    signal lhs_2_fu_352_p5 : STD_LOGIC_VECTOR (4 downto 0);
    signal rhs_2_fu_364_p5 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component matrix_mult_mux_32_5_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component matrix_mult_mul_5s_5s_10_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component matrix_mult_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    mux_32_5_1_1_U1 : component matrix_mult_mux_32_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        din2_WIDTH => 5,
        din3_WIDTH => 2,
        dout_WIDTH => 5)
    port map (
        din0 => A_0_0,
        din1 => A_1_0,
        din2 => A_2_0,
        din3 => ap_sig_allocacmp_i_1,
        dout => lhs_fu_287_p5);

    mux_32_5_1_1_U2 : component matrix_mult_mux_32_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        din2_WIDTH => 5,
        din3_WIDTH => 2,
        dout_WIDTH => 5)
    port map (
        din0 => B_0_0,
        din1 => B_1_0,
        din2 => B_2_0,
        din3 => ap_sig_allocacmp_i_1,
        dout => rhs_fu_303_p5);

    mul_5s_5s_10_1_1_U3 : component matrix_mult_mul_5s_5s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        din0 => rhs_fu_303_p5,
        din1 => lhs_fu_287_p5,
        dout => ret_fu_319_p2);

    mux_32_5_1_1_U4 : component matrix_mult_mux_32_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        din2_WIDTH => 5,
        din3_WIDTH => 2,
        dout_WIDTH => 5)
    port map (
        din0 => A_0_1,
        din1 => A_1_1,
        din2 => A_2_1,
        din3 => ap_sig_allocacmp_i_1,
        dout => lhs_1_fu_328_p5);

    mux_32_5_1_1_U5 : component matrix_mult_mux_32_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        din2_WIDTH => 5,
        din3_WIDTH => 2,
        dout_WIDTH => 5)
    port map (
        din0 => B_0_1,
        din1 => B_1_1,
        din2 => B_2_1,
        din3 => ap_sig_allocacmp_i_1,
        dout => rhs_1_fu_340_p5);

    mux_32_5_1_1_U6 : component matrix_mult_mux_32_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        din2_WIDTH => 5,
        din3_WIDTH => 2,
        dout_WIDTH => 5)
    port map (
        din0 => A_0_2,
        din1 => A_1_2,
        din2 => A_2_2,
        din3 => ap_sig_allocacmp_i_1,
        dout => lhs_2_fu_352_p5);

    mux_32_5_1_1_U7 : component matrix_mult_mux_32_5_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        din2_WIDTH => 5,
        din3_WIDTH => 2,
        dout_WIDTH => 5)
    port map (
        din0 => B_0_2,
        din1 => B_1_2,
        din2 => B_2_2,
        din3 => ap_sig_allocacmp_i_1,
        dout => rhs_2_fu_364_p5);

    mul_5s_5s_10_1_1_U8 : component matrix_mult_mul_5s_5s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        din0 => rhs_1_fu_340_p5,
        din1 => lhs_1_fu_328_p5,
        dout => ret_1_fu_384_p2);

    mul_5s_5s_10_1_1_U9 : component matrix_mult_mul_5s_5s_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        din0 => rhs_2_fu_364_p5,
        din1 => lhs_2_fu_352_p5,
        dout => ret_2_fu_401_p2);

    flow_control_loop_pipe_U : component matrix_mult_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_const_logic_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_start_int = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then
                if ((icmp_ln15_fu_275_p2 = ap_const_lv1_0)) then 
                    i_fu_92 <= add_ln15_fu_281_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_92 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    C_0_0 <= ret_fu_319_p2;

    C_0_0_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln15_fu_275_p2, i_1_load_fu_272_p1, ap_start_int)
    begin
        if (((i_1_load_fu_272_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln15_fu_275_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1))) then 
            C_0_0_ap_vld <= ap_const_logic_1;
        else 
            C_0_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    C_0_1 <= ret_1_fu_384_p2;

    C_0_1_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln15_fu_275_p2, i_1_load_fu_272_p1, ap_start_int)
    begin
        if (((i_1_load_fu_272_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln15_fu_275_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1))) then 
            C_0_1_ap_vld <= ap_const_logic_1;
        else 
            C_0_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    C_0_2 <= ret_2_fu_401_p2;

    C_0_2_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln15_fu_275_p2, i_1_load_fu_272_p1, ap_start_int)
    begin
        if (((i_1_load_fu_272_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln15_fu_275_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1))) then 
            C_0_2_ap_vld <= ap_const_logic_1;
        else 
            C_0_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    C_1_0 <= ret_fu_319_p2;

    C_1_0_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln15_fu_275_p2, i_1_load_fu_272_p1, ap_start_int)
    begin
        if (((i_1_load_fu_272_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln15_fu_275_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1))) then 
            C_1_0_ap_vld <= ap_const_logic_1;
        else 
            C_1_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    C_1_1 <= ret_1_fu_384_p2;

    C_1_1_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln15_fu_275_p2, i_1_load_fu_272_p1, ap_start_int)
    begin
        if (((i_1_load_fu_272_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln15_fu_275_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1))) then 
            C_1_1_ap_vld <= ap_const_logic_1;
        else 
            C_1_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    C_1_2 <= ret_2_fu_401_p2;

    C_1_2_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln15_fu_275_p2, i_1_load_fu_272_p1, ap_start_int)
    begin
        if (((i_1_load_fu_272_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln15_fu_275_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1))) then 
            C_1_2_ap_vld <= ap_const_logic_1;
        else 
            C_1_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    C_2_0 <= ret_fu_319_p2;

    C_2_0_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln15_fu_275_p2, i_1_load_fu_272_p1, ap_start_int)
    begin
        if ((not((i_1_load_fu_272_p1 = ap_const_lv2_0)) and not((i_1_load_fu_272_p1 = ap_const_lv2_1)) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln15_fu_275_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1))) then 
            C_2_0_ap_vld <= ap_const_logic_1;
        else 
            C_2_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    C_2_1 <= ret_1_fu_384_p2;

    C_2_1_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln15_fu_275_p2, i_1_load_fu_272_p1, ap_start_int)
    begin
        if ((not((i_1_load_fu_272_p1 = ap_const_lv2_0)) and not((i_1_load_fu_272_p1 = ap_const_lv2_1)) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln15_fu_275_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1))) then 
            C_2_1_ap_vld <= ap_const_logic_1;
        else 
            C_2_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    C_2_2 <= ret_2_fu_401_p2;

    C_2_2_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln15_fu_275_p2, i_1_load_fu_272_p1, ap_start_int)
    begin
        if ((not((i_1_load_fu_272_p1 = ap_const_lv2_0)) and not((i_1_load_fu_272_p1 = ap_const_lv2_1)) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln15_fu_275_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1))) then 
            C_2_2_ap_vld <= ap_const_logic_1;
        else 
            C_2_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln15_fu_281_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, icmp_ln15_fu_275_p2, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln15_fu_275_p2 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_start_int = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_local_block <= ap_const_logic_0;
    ap_local_deadlock <= ap_const_logic_0;
    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_state1, i_fu_92, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_92;
        end if; 
    end process;

    i_1_load_fu_272_p1 <= ap_sig_allocacmp_i_1;
    icmp_ln15_fu_275_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv2_3) else "0";
end behav;
